name: Build domains
on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: "0 18 * * *" # Runs automatically every day at 6 PM UTC
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md" # Ignores pushes that only change README files
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up environment variables
      # Defines URLs for various source domain lists (ads, trackers, media, CN domains, etc.)
      # and sets a version variable based on the current date/time.
      - name: Set variables
        run: |
          echo "update_version=$(date -d '+8 hours' +%Y-%m-%d)" >> ${GITHUB_ENV}
          echo "fakeip_filter=https://raw.githubusercontent.com/DustinWin/ShellCrash/dev/public/fake_ip_filter.list" >> $GITHUB_ENV
          echo "private=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.yaml" >> $GITHUB_ENV
          echo "ads=https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-clash.yaml" >> $GITHUB_ENV
          echo "trackerslist1=https://raw.githubusercontent.com/XIU2/TrackersListCollection/master/all.txt" >> $GITHUB_ENV
          echo "trackerslist2=https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt" >> $GITHUB_ENV
          echo "applications1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Download/Download.list" >> $GITHUB_ENV
          echo "applications2=https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt" >> $GITHUB_ENV
          echo "apple_cn=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf" >> $GITHUB_ENV
          echo "google_cn=https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/google.china.conf" >> $GITHUB_ENV
          echo "games_cn1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.list" >> $GITHUB_ENV
          echo "games_cn2=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/GameDownloadCN/GameDownloadCN.list" >> $GITHUB_ENV
          echo "netflix=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.list" >> $GITHUB_ENV
          echo "disney=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney.list" >> $GITHUB_ENV
          echo "max=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/HBO/HBO.list" >> $GITHUB_ENV
          echo "primevideo=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PrimeVideo/PrimeVideo.list" >> $GITHUB_ENV
          echo "appletv=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AppleTV/AppleTV.list" >> $GITHUB_ENV
          echo "youtube=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.list" >> $GITHUB_ENV
          echo "tiktok=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.list" >> $GITHUB_ENV
          echo "bilibili=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.list" >> $GITHUB_ENV
          echo "spotify=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.list" >> $GITHUB_ENV
          echo "media=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia.list" >> $GITHUB_ENV
          echo "games1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game.list" >> $GITHUB_ENV
          echo "games2=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/GameDownload/GameDownload.list" >> $GITHUB_ENV
          echo "ai1=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.list" >> $GITHUB_ENV
          echo "ai2=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Copilot/Copilot.list" >> $GITHUB_ENV
          echo "ai3=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Gemini/Gemini.list" >> $GITHUB_ENV
          echo "ai4=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.list" >> $GITHUB_ENV
          echo "networktest=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest.list" >> $GITHUB_ENV
          echo "proxy=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list" >> $GITHUB_ENV
          echo "cn=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax.list" >> $GITHUB_ENV
          echo "hulu=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Hulu/Hulu.yaml" >> $GITHUB_ENV
          echo "telegram=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml" >> $GITHUB_ENV
          echo "youtubemusic=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTubeMusic/YouTubeMusic.yaml" >> $GITHUB_ENV
          echo "twitter=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml" >> $GITHUB_ENV
          echo "github=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml" >> $GITHUB_ENV
          echo "gitlab=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitLab/GitLab.yaml" >> $GITHUB_ENV
          echo "cloudflare=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Cloudflare/Cloudflare.yaml" >> $GITHUB_ENV
          echo "adobe=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Adobe/Adobe.list" >> $GITHUB_ENV
          echo "binance=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Binance/Binance.yaml" >> $GITHUB_ENV
          echo "douyin=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/DouYin/DouYin.yaml" >> $GITHUB_ENV
          echo "duolingo=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Duolingo/Duolingo.yaml" >> $GITHUB_ENV
          echo "facebook=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Facebook/Facebook.yaml" >> $GITHUB_ENV
          echo "instagram=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Instagram/Instagram.yaml" >> $GITHUB_ENV
          echo "shopee=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Shopee/Shopee.yaml" >> $GITHUB_ENV
          echo "wechat=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/WeChat/WeChat.yaml" >> $GITHUB_ENV
          echo "applenews=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AppleNews/AppleNews.yaml" >> $GITHUB_ENV
          echo "applemusic=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AppleMusic/AppleMusic.yaml" >> $GITHUB_ENV
          echo "apple_classical=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml" >> $GITHUB_ENV
          echo "google=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml" >> $GITHUB_ENV
          echo "truthSocial=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TruthSocial/TruthSocial.yaml" >> $GITHUB_ENV
        shell: bash

      # Step 2: Check out the main repository's code
      - name: Checkout codebase
        uses: actions/checkout@master

      # Step 3: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./go.mod # Reads Go version from go.mod

      # Step 4: Check out V2Fly domain-list-community repository
      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v5
        with:
          repository: v2fly/domain-list-community
          path: community

      # Step 5: Check out gfwlist2dnsmasq repository
      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v5
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      # Step 6: Modify community domain lists
      - name: Append attribute domains
        run: |
          echo "include:geolocation-cn @!cn" >> ./community/data/geolocation-\!cn
          echo "include:geolocation-!cn @cn" >> ./community/data/cn

      # Step 7: Generate geosite.dat and domains (.txt files)
      - name: Generate `mihomo` geosite.dat and domains (.txt files)
        run: |
          go run ./ --datapath=./community/data/

      # Steps 8-36: Generate various domain lists
      - name: Generate `fakeip-filter`
        run: |
          mkdir -p ./tmp/ ./domains/
          curl -sSL ${fakeip_filter} | perl -ne '/^[\+\*]\.([^\*]+)\n$/ && print "$1\n"' | sort --ignore-case > ./tmp/fakeip-filter-suffix.txt
          curl -sSL ${fakeip_filter} | awk '!/[#+* ]/' | sed 's/^/DOMAIN,/' > ./tmp/temp-fakeip-filter-other.txt
          curl -sSL ${fakeip_filter} | awk '/\*/ && !/#/ && !/\./' | sed -e 's/\*/\[\^\.\]\+/g' -e 's/^/DOMAIN-REGEX,\^/; s/$/\$/' >> ./tmp/temp-fakeip-filter-other.txt
          curl -sSL ${fakeip_filter} | awk '!/#/ && (/\.\*/ || / /)' | sed -e 's/ /\\s/g' -e 's/\./\\./g' -e 's/\*/\[\^\.\]\+/g' -e 's/^\+/\.\*/' -e 's/^/DOMAIN-REGEX,\^/; s/$/\$/' >> ./tmp/temp-fakeip-filter-other.txt
          sort --ignore-case ./tmp/temp-fakeip-filter-other.txt > ./tmp/fakeip-filter-other.txt

      - name: Generate `fakeip-filter-lite`
        run: |
          cat <<EOF > ./tmp/temp-fakeip-filter-lite.txt
          DOMAIN,adguardteam.github.io
          DOMAIN,adrules.top
          DOMAIN,anti-ad.net
          DOMAIN,local.adguard.org
          DOMAIN,static.adtidy.org
          EOF
          curl -sSL ${fakeip_filter} | awk '!/[#+* ]/ && /ntp|stun|time/' | sed 's/^/DOMAIN,/' >> ./tmp/temp-fakeip-filter-lite.txt
          curl -sSL ${fakeip_filter} | awk '/ntp|stun|time/' | perl -ne '/^[\+\*]\.([^\*]+)\n$/ && print "DOMAIN-SUFFIX,$1\n"' >> ./tmp/temp-fakeip-filter-lite.txt
          curl -sSL ${fakeip_filter} | awk '/ntp|stun|time/ && /\.\*/' | sed -e 's/\./\\./g' -e 's/\*/\[\^\.\]\+/g' -e 's/^\+/\.\*/' -e 's/^/DOMAIN-REGEX,\^/; s/$/\$/' >> ./tmp/temp-fakeip-filter-lite.txt
          sort --ignore-case ./tmp/temp-fakeip-filter-lite.txt > ./domains/fakeip-filter-lite.list

      - name: Generate `private`
        run: |
          cat ./publish/private.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-private-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${private} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-private-suffix.txt
          sort --ignore-case -u ./tmp/temp-private-suffix.txt > ./tmp/private-suffix.txt
          cat <<EOF > ./tmp/temp-private-other.txt
          DOMAIN,board.zash.run.place
          DOMAIN,metacubex.github.io
          DOMAIN,metacubexd.pages.dev
          DOMAIN,yacd.haishan.me
          DOMAIN,yacd.metacubex.one
          EOF
          cat ./publish/private.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' >> ./tmp/temp-private-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${private} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-private-other.txt
          echo "DOMAIN-REGEX,^[^.]+$" >> ./tmp/temp-private-other.txt
          sort --ignore-case -u ./tmp/temp-private-other.txt > ./tmp/private-other.txt

      - name: Generate `ads`
        run: |
          # This command is for a different .yaml format (anti-AD), leave it as is.
          curl -sSL ${ads} | perl -ne "/'([^']+)'/ && print \"\$1\n\"" | sed 's/^+\./DOMAIN-SUFFIX,/; t; s/^/DOMAIN,/' | sort --ignore-case > ./domains/ads.list

      - name: Generate `trackerslist`
        run: |
          curl -sSL ${trackerslist1} | grep -i '\.[A-Z]' | awk -F '[/:]' '{print $4}' | sed 's/^/DOMAIN,/' > ./tmp/temp-trackerslist.txt
          curl -sSL ${trackerslist2} | grep -i '\.[A-Z]' | awk -F '[/:]' '{print $4}' | sed 's/^/DOMAIN,/' >> ./tmp/temp-trackerslist.txt
          sort --ignore-case -u ./tmp/temp-trackerslist.txt > ./domains/trackerslist.list

      - name: Generate `applications`
        run: |
          curl -sSL ${applications1} | awk '/^DOMAIN,|^DOMAIN-SUFFIX,|^DOMAIN-KEYWORD,|^PROCESS-NAME,/' > ./tmp/temp-applications.txt
          curl -sSL ${applications2} | perl -ne '/^\s*-\s+(.*)/ && print "$1\n"' >> ./tmp/temp-applications.txt
          sort --ignore-case -u ./tmp/temp-applications.txt > ./domains/applications.list

      - name: Generate `adobe`
        run: |
          cat ./publish/adobe.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-adobe-suffix.txt
          # This is a .list file, awk is correct.
          curl -sSL ${adobe} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-adobe-suffix.txt
          sort --ignore-case -u ./tmp/temp-adobe-suffix.txt > ./tmp/adobe-suffix.txt

          cat ./publish/adobe.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-adobe-other.txt
          # This is a .list file, awk is correct.
          curl -sSL ${adobe} | awk '/^DOMAIN,/' >> ./tmp/temp-adobe-other.txt
          sort --ignore-case -u ./tmp/temp-adobe-other.txt > ./tmp/adobe-other.txt

      - name: Generate `microsoft-cn`
        run: |
          cat ./publish/microsoft.txt 2>/dev/null | perl -ne '/^(domain):([^:]+):@cn/ && print "$2\n"' > ./tmp/microsoft-cn-suffix.txt
          cat ./publish/microsoft.txt 2>/dev/null | perl -ne '/^(full):([^:]+):@cn/ && print "DOMAIN,$2\n"' > ./tmp/microsoft-cn-other.txt

      - name: Generate `apple-cn`
        run: |
          cat ./publish/apple.txt 2>/dev/null | perl -ne '/^(domain):([^:]+):@cn/ && print "$2\n"' > ./tmp/apple-cn-suffix.txt
          cat ./publish/apple.txt 2>/dev/null | perl -ne '/^(full):([^:]+):@cn/ && print "DOMAIN,$2\n"' > ./tmp/temp-apple-cn-other.txt
          # This is a .conf file, perl is correct.
          curl -sSL ${apple_cn} | perl -ne '/server=\/([^\/]+)/ && print "DOMAIN,$1\n"' >> ./tmp/temp-apple-cn-other.txt
          sort --ignore-case -u ./tmp/temp-apple-cn-other.txt > ./tmp/apple-cn-other.txt

      - name: Generate `applemusic`
        run: |
          cat ./publish/applemusic.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-applemusic-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${applemusic} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-applemusic-suffix.txt
          sort --ignore-case -u ./tmp/temp-applemusic-suffix.txt > ./tmp/applemusic-suffix.txt

          cat ./publish/applemusic.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-applemusic-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${applemusic} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-applemusic-other.txt
          sort --ignore-case -u ./tmp/temp-applemusic-other.txt > ./tmp/applemusic-other.txt

      - name: Generate `applenews`
        run: |
          cat ./publish/applenews.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-applenews-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${applenews} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-applenews-suffix.txt
          sort --ignore-case -u ./tmp/temp-applenews-suffix.txt > ./tmp/applenews-suffix.txt

          cat ./publish/applenews.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-applenews-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${applenews} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-applenews-other.txt
          sort --ignore-case -u ./tmp/temp-applenews-other.txt > ./tmp/applenews-other.txt

      - name: Generate `apple_classical`
        run: |
          cat ./publish/apple_classical.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-apple_classical-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${apple_classical} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-apple_classical-suffix.txt
          sort --ignore-case -u ./tmp/temp-apple_classical-suffix.txt > ./tmp/apple_classical-suffix.txt

          cat ./publish/apple_classical.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-apple_classical-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${apple_classical} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-apple_classical-other.txt
          sort --ignore-case -u ./tmp/temp-apple_classical-other.txt > ./tmp/apple_classical-other.txt

      - name: Generate `google-cn`
        run: |
          cat ./publish/google.txt 2>/dev/null | perl -ne '/^(domain):([^:]+):@cn/ && print "$2\n"' > ./tmp/google-cn-suffix.txt
          cat ./publish/google.txt 2>/dev/null | perl -ne '/^(full):([^:]+):@cn/ && print "DOMAIN,$2\n"' > ./tmp/temp-google-cn-other.txt
          # This is a .conf file, perl is correct.
          curl -sSL ${google_cn} | perl -ne '/server=\/([^\/]+)/ && print "DOMAIN,$1\n"' >> ./tmp/temp-google-cn-other.txt
          sort --ignore-case -u ./tmp/temp-google-cn-other.txt > ./tmp/google-cn-other.txt

      - name: Generate `google`
        run: |
          cat ./publish/google.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-google-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${google} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-google-suffix.txt
          sort --ignore-case -u ./tmp/temp-google-suffix.txt > ./tmp/google-suffix.txt

          cat ./publish/google.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-google-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${google} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-google-other.txt
          sort --ignore-case -u ./tmp/temp-google-other.txt > ./tmp/google-other.txt

      - name: Generate `games-cn`
        run: |
          cat ./publish/category-game-accelerator-cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-games-cn-suffix.txt
          cat ./publish/category-game-platforms-download.txt 2>/dev/null | perl -ne '/^(domain):([^:]+):@cn/ && print "$2\n"' >> ./tmp/temp-games-cn-suffix.txt
          cat ./publish/category-games-cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> ./tmp/temp-games-cn-suffix.txt
          curl -sSL ${games_cn1} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-games-cn-suffix.txt
          curl -sSL ${games_cn2} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-games-cn-suffix.txt
          sort --ignore-case -u ./tmp/temp-games-cn-suffix.txt > ./tmp/games-cn-suffix.txt
          cat ./publish/category-game-accelerator-cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-games-cn-other.txt
          cat ./publish/category-game-platforms-download.txt 2>/dev/null | perl -ne '/^(full):([^:]+):@cn/ && print "DOMAIN,$2\n"' >> ./tmp/temp-games-cn-other.txt
          cat ./publish/category-games-cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' >> ./tmp/temp-games-cn-other.txt
          curl -sSL ${games_cn1} | awk '/^DOMAIN,/' >> ./tmp/temp-games-cn-other.txt
          curl -sSL ${games_cn2} | awk '/^DOMAIN,/' >> ./tmp/temp-games-cn-other.txt
          sort --ignore-case -u ./tmp/temp-games-cn-other.txt > ./tmp/games-cn-other.txt

      - name: Generate `netflix`
        run: |
          cat ./publish/netflix.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-netflix-suffix.txt
          curl -sSL ${netflix} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-netflix-suffix.txt
          sort --ignore-case -u ./tmp/temp-netflix-suffix.txt > ./tmp/netflix-suffix.txt
          cat ./publish/netflix.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-netflix-other.txt
          curl -sSL ${netflix} | awk '/^DOMAIN,/' >> ./tmp/temp-netflix-other.txt
          sort --ignore-case -u ./tmp/temp-netflix-other.txt > ./tmp/netflix-other.txt

      - name: Generate `disney`
        run: |
          cat ./publish/disney.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-disney-suffix.txt
          curl -sSL ${disney} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-disney-suffix.txt
          sort --ignore-case -u ./tmp/temp-disney-suffix.txt > ./tmp/disney-suffix.txt
          cat ./publish/disney.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-disney-other.txt
          curl -sSL ${disney} | awk '/^DOMAIN,/' >> ./tmp/temp-disney-other.txt
          sort --ignore-case -u ./tmp/temp-disney-other.txt > ./tmp/disney-other.txt

      - name: Generate `douyin`
        run: |
          cat ./publish/douyin.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-douyin-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${douyin} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-douyin-suffix.txt
          sort --ignore-case -u ./tmp/temp-douyin-suffix.txt > ./tmp/douyin-suffix.txt

          cat ./publish/douyin.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-douyin-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${douyin} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-douyin-other.txt
          sort --ignore-case -u ./tmp/temp-douyin-other.txt > ./tmp/douyin-other.txt

      - name: Generate `duolingo`
        run: |
          cat ./publish/duolingo.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-duolingo-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${duolingo} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-duolingo-suffix.txt
          sort --ignore-case -u ./tmp/temp-duolingo-suffix.txt > ./tmp/duolingo-suffix.txt

          cat ./publish/duolingo.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-duolingo-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${duolingo} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-duolingo-other.txt
          sort --ignore-case -u ./tmp/temp-duolingo-other.txt > ./tmp/duolingo-other.txt

      - name: Generate `facebook`
        run: |
          cat ./publish/facebook.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-facebook-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${facebook} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-facebook-suffix.txt
          sort --ignore-case -u ./tmp/temp-facebook-suffix.txt > ./tmp/facebook-suffix.txt

          cat ./publish/facebook.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-facebook-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${facebook} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-facebook-other.txt
          sort --ignore-case -u ./tmp/temp-facebook-other.txt > ./tmp/facebook-other.txt

      - name: Generate `max`
        run: |
          cat ./publish/hbo.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-max-suffix.txt
          curl -sSL ${max} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-max-suffix.txt
          sort --ignore-case -u ./tmp/temp-max-suffix.txt > ./tmp/max-suffix.txt
          cat ./publish/hbo.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-max-other.txt
          curl -sSL ${max} | awk '/^DOMAIN,/' >> ./tmp/temp-max-other.txt
          sort --ignore-case -u ./tmp/temp-max-other.txt > ./tmp/max-other.txt

      - name: Generate `primevideo`
        run: |
          cat ./publish/primevideo.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-primevideo-suffix.txt
          curl -sSL ${primevideo} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-primevideo-suffix.txt
          sort --ignore-case -u ./tmp/temp-primevideo-suffix.txt > ./tmp/primevideo-suffix.txt
          cat ./publish/primevideo.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-primevideo-other.txt
          curl -sSL ${primevideo} | awk '/^DOMAIN,/' >> ./tmp/temp-primevideo-other.txt
          sort --ignore-case -u ./tmp/temp-primevideo-other.txt > ./tmp/primevideo-other.txt

      - name: Generate `appletv`
        run: |
          cat ./publish/apple-tvplus.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-appletv-suffix.txt
          curl -sSL ${appletv} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-appletv-suffix.txt
          sort --ignore-case -u ./tmp/temp-appletv-suffix.txt > ./tmp/appletv-suffix.txt
          cat ./publish/apple-tvplus.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-appletv-other.txt
          curl -sSL ${appletv} | awk '/^DOMAIN,/' >> ./tmp/temp-appletv-other.txt
          sort --ignore-case -u ./tmp/temp-appletv-other.txt > ./tmp/appletv-other.txt

      - name: Generate `youtubemusic`
        run: |
          cat ./publish/youtubemusic.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-youtubemusic-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${youtubemusic} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-youtubemusic-suffix.txt
          sort --ignore-case -u ./tmp/temp-youtubemusic-suffix.txt > ./tmp/youtubemusic-suffix.txt

          cat ./publish/youtubemusic.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-youtubemusic-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${youtubemusic} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-youtubemusic-other.txt
          sort --ignore-case -u ./tmp/temp-youtubemusic-other.txt > ./tmp/youtubemusic-other.txt

      - name: Generate `youtube`
        run: |
          cat ./publish/youtube.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-youtube-suffix.txt
          curl -sSL ${youtube} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-youtube-suffix.txt
          sort --ignore-case -u ./tmp/temp-youtube-suffix.txt > ./tmp/youtube-suffix.txt
          cat ./publish/youtube.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-youtube-other.txt
          curl -sSL ${youtube} | awk '/^DOMAIN,/' >> ./tmp/temp-youtube-other.txt
          sort --ignore-case -u ./tmp/temp-youtube-other.txt > ./tmp/youtube-other.txt

      - name: Generate `tiktok`
        run: |
          cat ./publish/tiktok.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-tiktok-suffix.txt
          curl -sSL ${tiktok} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-tiktok-suffix.txt
          sort --ignore-case -u ./tmp/temp-tiktok-suffix.txt > ./tmp/tiktok-suffix.txt
          cat ./publish/tiktok.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-tiktok-other.txt
          curl -sSL ${tiktok} | awk '/^DOMAIN,/' >> ./tmp/temp-tiktok-other.txt
          sort --ignore-case -u ./tmp/temp-tiktok-other.txt > ./tmp/tiktok-other.txt

      - name: Generate `binance`
        run: |
          cat ./publish/binance.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-binance-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${binance} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-binance-suffix.txt
          sort --ignore-case -u ./tmp/temp-binance-suffix.txt > ./tmp/binance-suffix.txt

          cat ./publish/binance.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-binance-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${binance} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-binance-other.txt
          sort --ignore-case -u ./tmp/temp-binance-other.txt > ./tmp/binance-other.txt

      - name: Generate `bilibili`
        run: |
          cat ./publish/bilibili.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-bilibili-suffix.txt
          curl -sSL ${bilibili} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-bilibili-suffix.txt
          sort --ignore-case -u ./tmp/temp-bilibili-suffix.txt > ./tmp/bilibili-suffix.txt
          cat ./publish/bilibili.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-bilibili-other.txt
          curl -sSL ${bilibili} | awk '/^DOMAIN,/' >> ./tmp/temp-bilibili-other.txt
          sort --ignore-case -u ./tmp/temp-bilibili-other.txt > ./tmp/bilibili-other.txt

      - name: Generate `cloudflare`
        run: |
          cat ./publish/cloudflare.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-cloudflare-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${cloudflare} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-cloudflare-suffix.txt
          sort --ignore-case -u ./tmp/temp-cloudflare-suffix.txt > ./tmp/cloudflare-suffix.txt

          cat ./publish/cloudflare.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-cloudflare-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${cloudflare} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-cloudflare-other.txt
          sort --ignore-case -u ./tmp/temp-cloudflare-other.txt > ./tmp/cloudflare-other.txt

      - name: Generate `spotify`
        run: |
          cat ./publish/spotify.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-spotify-suffix.txt
          curl -sSL ${spotify} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-spotify-suffix.txt
          sort --ignore-case -u ./tmp/temp-spotify-suffix.txt > ./tmp/spotify-suffix.txt
          cat ./publish/spotify.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-spotify-other.txt
          curl -sSL ${spotify} | awk '/^DOMAIN,/' >> ./tmp/temp-spotify-other.txt
          sort --ignore-case -u ./tmp/temp-spotify-other.txt > ./tmp/spotify-other.txt

      - name: Generate `shopee`
        run: |
          cat ./publish/shopee.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-shopee-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${shopee} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-shopee-suffix.txt
          sort --ignore-case -u ./tmp/temp-shopee-suffix.txt > ./tmp/shopee-suffix.txt

          cat ./publish/shopee.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-shopee-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${shopee} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-shopee-other.txt
          sort --ignore-case -u ./tmp/temp-shopee-other.txt > ./tmp/shopee-other.txt

      - name: Generate `telegram`
        run: |
          cat ./publish/telegram.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-telegram-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${telegram} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-telegram-suffix.txt
          sort --ignore-case -u ./tmp/temp-telegram-suffix.txt > ./tmp/telegram-suffix.txt

          cat ./publish/telegram.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-telegram-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${telegram} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-telegram-other.txt
          sort --ignore-case -u ./tmp/temp-telegram-other.txt > ./tmp/telegram-other.txt

      - name: Generate `truthSocial`
        run: |
          cat ./publish/truthSocial.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-truthSocial-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${truthSocial} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-truthSocial-suffix.txt
          sort --ignore-case -u ./tmp/temp-truthSocial-suffix.txt > ./tmp/truthSocial-suffix.txt

          cat ./publish/truthSocial.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-truthSocial-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${truthSocial} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-truthSocial-other.txt
          sort --ignore-case -u ./tmp/temp-truthSocial-other.txt > ./tmp/truthSocial-other.txt

      - name: Generate `twitter`
        run: |
          cat ./publish/twitter.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-twitter-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${twitter} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-twitter-suffix.txt
          sort --ignore-case -u ./tmp/temp-twitter-suffix.txt > ./tmp/twitter-suffix.txt

          cat ./publish/twitter.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-twitter-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${twitter} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-twitter-other.txt
          sort --ignore-case -u ./tmp/temp-twitter-other.txt > ./tmp/twitter-other.txt

      - name: Generate `wechat`
        run: |
          cat ./publish/wechat.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-wechat-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${wechat} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-wechat-suffix.txt
          sort --ignore-case -u ./tmp/temp-wechat-suffix.txt > ./tmp/wechat-suffix.txt

          cat ./publish/wechat.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-wechat-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${wechat} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-wechat-other.txt
          sort --ignore-case -u ./tmp/temp-wechat-other.txt > ./tmp/wechat-other.txt

      - name: Generate `media`
        run: |
          curl -sSL ${media} | awk '/^DOMAIN,|^DOMAIN-SUFFIX,/' | sort --ignore-case > ./domains/media.list

      - name: Generate `games`
        run: |
          chmod +x ./tools/removeFrom.py
          cat ./publish/category-game-platforms-download.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@!cn)/ && print "$2\n"' > ./tmp/temp-games-suffix.txt
          cat ./publish/category-games-\!cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@!cn)/ && print "$2\n"' >> ./tmp/temp-games-suffix.txt
          # Remove `games-cn` from `games` (suffix)
          curl -sSL ${games1} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' > ./tmp/games-with-cn-suffix-unsort.txt
          curl -sSL ${games2} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/games-with-cn-suffix-unsort.txt
          sort --ignore-case -u ./tmp/games-with-cn-suffix-unsort.txt > ./tmp/games-with-cn-suffix.txt
          curl -sSL ${games_cn1} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' > ./tmp/games-cn-suffix-deleted-unsort.txt
          curl -sSL ${games_cn2} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/games-cn-suffix-deleted-unsort.txt
          sort --ignore-case -u ./tmp/games-cn-suffix-deleted-unsort.txt > ./tmp/games-cn-suffix-deleted.txt
          python ./tools/removeFrom.py -remove ./tmp/games-cn-suffix-deleted.txt -from ./tmp/games-with-cn-suffix.txt -out ./tmp/games-without-cn-suffix.txt
          cat ./tmp/games-without-cn-suffix.txt >> ./tmp/temp-games-suffix.txt
          sort --ignore-case -u ./tmp/temp-games-suffix.txt > ./tmp/games-suffix.txt
          cat ./publish/category-game-platforms-download.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@!cn)/ && print "DOMAIN,$2\n"' > ./tmp/temp-games-other.txt
          cat ./publish/category-games-\!cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@!cn)/ && print "DOMAIN,$2\n"' >> ./tmp/temp-games-other.txt
          # Remove `games-cn` from `games` (other)
          curl -sSL ${games1} | awk '/^DOMAIN,/' > ./tmp/games-with-cn-other-unsort.txt
          curl -sSL ${games2} | awk '/^DOMAIN,/' >> ./tmp/games-with-cn-other-unsort.txt
          sort --ignore-case -u ./tmp/games-with-cn-other-unsort.txt > ./tmp/games-with-cn-other.txt
          curl -sSL ${games_cn1} | awk '/^DOMAIN,/' > ./tmp/games-cn-other-deleted-unsort.txt
          curl -sSL ${games_cn2} | awk '/^DOMAIN,/' >> ./tmp/games-cn-other-deleted-unsort.txt
          sort --ignore-case -u ./tmp/games-cn-other-deleted-unsort.txt > ./tmp/games-cn-other-deleted.txt
          python ./tools/removeFrom.py -remove ./tmp/games-cn-other-deleted.txt -from ./tmp/games-with-cn-other.txt -out ./tmp/games-without-cn-other.txt
          cat ./tmp/games-without-cn-other.txt >> ./tmp/temp-games-other.txt
          sort --ignore-case -u ./tmp/temp-games-other.txt > ./tmp/games-other.txt

      - name: Generate `ai`
        run: |
          cat ./publish/category-ai-\!cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-ai-suffix.txt
          curl -sSL ${ai1} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-ai-suffix.txt
          curl -sSL ${ai2} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-ai-suffix.txt
          curl -sSL ${ai3} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-ai-suffix.txt
          curl -sSL ${ai4} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-ai-suffix.txt
          sort --ignore-case -u ./tmp/temp-ai-suffix.txt > ./tmp/ai-suffix.txt

          cat ./publish/category-ai-\!cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-ai-other.txt
          curl -sSL ${ai1} | awk '/^DOMAIN,/' >> ./tmp/temp-ai-other.txt
          curl -sSL ${ai2} | awk '/^DOMAIN,/' >> ./tmp/temp-ai-other.txt
          curl -sSL ${ai3} | awk '/^DOMAIN,/' >> ./tmp/temp-ai-other.txt
          curl -sSL ${ai4} | awk '/^DOMAIN,/' >> ./tmp/temp-ai-other.txt
          sort --ignore-case -u ./tmp/temp-ai-other.txt > ./tmp/ai-other.txt

      - name: Generate `networktest`
        run: |
          cat ./publish/test-ipv6.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-networktest-suffix.txt
          cat ./publish/category-speedtest.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> ./tmp/temp-networktest-suffix.txt
          curl -sSL ${networktest} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-networktest-suffix.txt
          sort --ignore-case -u ./tmp/temp-networktest-suffix.txt > ./tmp/networktest-suffix.txt
          cat ./publish/test-ipv6.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-networktest-other.txt
          cat ./publish/category-speedtest.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' >> ./tmp/temp-networktest-other.txt
          curl -sSL ${networktest} | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-networktest-other.txt
          sort --ignore-case -u ./tmp/temp-networktest-other.txt > ./tmp/networktest-other.txt

      - name: Generate `tld-proxy`
        run: |
          cat ./publish/tld-\!cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/tld-proxy-suffix.txt
          cat ./publish/tld-\!cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/tld-proxy-other.txt

      - name: Generate `gfw`
        run: |
          chmod +x ./gfwlist2dnsmasq/gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq/gfwlist2dnsmasq.sh -l -o ./tmp/temp-gfw.txt
          cat ./tmp/temp-gfw.txt | sed 's/^/DOMAIN-SUFFIX,/' | sort --ignore-case > ./domains/gfw.list

      - name: Generate `github`
        run: |
          cat ./publish/github.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-github-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${github} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-github-suffix.txt
          sort --ignore-case -u ./tmp/temp-github-suffix.txt > ./tmp/github-suffix.txt

          cat ./publish/github.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-github-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${github} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-github-other.txt
          sort --ignore-case -u ./tmp/temp-github-other.txt > ./tmp/github-other.txt

      - name: Generate `gitlab`
        run: |
          cat ./publish/gitlab.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-gitlab-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${gitlab} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-gitlab-suffix.txt
          sort --ignore-case -u ./tmp/temp-gitlab-suffix.txt > ./tmp/gitlab-suffix.txt

          cat ./publish/gitlab.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-gitlab-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${gitlab} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-gitlab-other.txt
          sort --ignore-case -u ./tmp/temp-gitlab-other.txt > ./tmp/gitlab-other.txt

      - name: Generate `hulu`
        run: |
          cat ./publish/hulu.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-hulu-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${hulu} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-hulu-suffix.txt
          sort --ignore-case -u ./tmp/temp-hulu-suffix.txt > ./tmp/hulu-suffix.txt

          cat ./publish/hulu.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-hulu-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${hulu} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-hulu-other.txt
          sort --ignore-case -u ./tmp/temp-hulu-other.txt > ./tmp/hulu-other.txt

      - name: Generate `instagram`
        run: |
          cat ./publish/instagram.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-instagram-suffix.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${instagram} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-instagram-suffix.txt
          sort --ignore-case -u ./tmp/temp-instagram-suffix.txt > ./tmp/instagram-suffix.txt

          cat ./publish/instagram.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-instagram-other.txt
          # *** FIX: Use universal sed command for .yaml files (handles both quoted and unquoted rules) ***
          curl -sSL ${instagram} | sed -n '/payload:/,$p' | sed -E "s/^\s*-\s*'?(.*?)'?$/\1/" | awk '/^DOMAIN,|^DOMAIN-KEYWORD,/' >> ./tmp/temp-instagram-other.txt
          sort --ignore-case -u ./tmp/temp-instagram-other.txt > ./tmp/instagram-other.txt

      - name: Generate `proxy`
        run: |
          cp -f ./tmp/temp-gfw.txt ./tmp/temp-proxy-suffix.txt
          cat ./publish/geolocation-\!cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' >> ./tmp/temp-proxy-suffix.txt
          curl -sSL ${proxy} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-proxy-suffix.txt
          sort --ignore-case -u ./tmp/temp-proxy-suffix.txt > ./tmp/proxy-suffix.txt
          cat ./publish/geolocation-\!cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-proxy-other.txt
          curl -sSL ${proxy} | awk '/^DOMAIN,/' >> ./tmp/temp-proxy-other.txt
          sort --ignore-case -u ./tmp/temp-proxy-other.txt > ./tmp/proxy-other.txt

      - name: Generate `cn`
        run: |
          cat ./publish/cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-cn-suffix.txt
          curl -sSL ${cn} | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-cn-suffix.txt
          sort --ignore-case -u ./tmp/temp-cn-suffix.txt > ./tmp/cn-suffix.txt

          cat ./publish/cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-cn-other.txt
          curl -sSL ${cn} | awk '/^DOMAIN,/' >> ./tmp/temp-cn-other.txt
          sort --ignore-case -u ./tmp/temp-cn-other.txt > ./tmp/cn-other.txt

      - name: Generate `cn-lite`
        run: |
          cat ./publish/cn.txt 2>/dev/null | perl -ne '/^(domain):([^:]+)(\n$|:@.+)/ && print "$2\n"' > ./tmp/temp-cn-lite-suffix.txt
          # cn-lite uses cn1 which is blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list
          # This variable was removed from the top, let's re-add it for this step.
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list | awk '/^DOMAIN-SUFFIX,/' | sed 's/DOMAIN-SUFFIX,//' >> ./tmp/temp-cn-lite-suffix.txt
          sort --ignore-case -u ./tmp/temp-cn-lite-suffix.txt > ./tmp/cn-lite-suffix.txt

          cat ./publish/cn.txt 2>/dev/null | perl -ne '/^(full):([^:]+)(\n$|:@.+)/ && print "DOMAIN,$2\n"' > ./tmp/temp-cn-lite-other.txt
          curl -sSL https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list | awk '/^DOMAIN,/' >> ./tmp/temp-cn-lite-other.txt
          sort --ignore-case -u ./tmp/temp-cn-lite-other.txt > ./tmp/cn-lite-other.txt

      # Step 37: De-duplication and final formatting
      - name: Remove redundant domains
        run: |
          chmod +x ./tools/*.py ./tools/filter.sh
          archs=(fakeip-filter private microsoft-cn apple-cn google-cn games-cn netflix disney max primevideo appletv youtube tiktok bilibili spotify games ai networktest tld-proxy proxy cn cn-lite adobe applemusic applenews apple_classical google douyin duolingo facebook binance cloudflare shopee telegram truthSocial twitter wechat github gitlab hulu instagram youtubemusic)
          for arch in "${archs[@]}"; do
            # Add error suppression in case tmp files don't exist
            python ./tools/findRedundantDomain.py "./tmp/${arch}-suffix.txt" "./tmp/${arch}-deleted-unsort-suffix.txt" 2>/dev/null || true
            [ ! -f "./tmp/${arch}-deleted-unsort-suffix.txt" ] && touch "./tmp/${arch}-deleted-unsort-suffix.txt"
            sort --ignore-case "./tmp/${arch}-deleted-unsort-suffix.txt" > "./tmp/${arch}-deleted-sort-suffix.txt"
            python ./tools/removeFrom.py -remove "./tmp/${arch}-deleted-sort-suffix.txt" -from "./tmp/${arch}-suffix.txt" -out "./tmp/none-redundant-${arch}-suffix.txt" 2>/dev/null || true
            cat "./tmp/none-redundant-${arch}-suffix.txt" 2>/dev/null | sed 's/^/DOMAIN-SUFFIX,/' > "./tmp/done-${arch}-suffix.txt"
            cat "./tmp/${arch}-other.txt" "./tmp/done-${arch}-suffix.txt" 2>/dev/null | sort --ignore-case -u > "./tmp/${arch}-redundant.txt"

            ./tools/filter.sh "./tmp/${arch}-redundant.txt" > "./domains/${arch}.list"
          done
          rm -rf ./tmp* ./publish*

      # Step 38: Create a GitHub Release
      - name: Release and upload `domains` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: domains
          tag: domains
          overwrite: true
          body: |
            供下游项目 [DustinWin/ruleset_geodata](https://github.com/DustinWin/ruleset_geodata) 使用的 DOMAIN 数据源文件
            文件更新于 ${{ env.update_version }}
          file_glob: true
          file: ./domains/*

      # Step 39: Push files to the `domains` branch
      - name: Git push assets to `domains` branch
        run: |
          cd ./domains/ || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b domains
          git add . && git commit -m "DOMAIN 数据源文件更新于 ${update_version}"
          git remote add origin "https://github.com/${{ github.repository }}"
          git push -f --set-upstream origin domains
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 40: Purge jsDelivr CDN
      - name: Purge jsDelivr CDN
        run: |
          cd ./domains/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@domains/${file}"
          done

      # Step 41: Clean up old workflow runs
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 1
